class threading.Thread(group=None, target=None, name=None, args=(), kwargs=[])
  This constructor should always be called with keyword arguments. Arguments are:
  group should be None; reversed for future extension when a ThreadGroup class is implemented.
  target is the callable object to be invoked by the run() method. Default to None, meaning nothing is called.
  name is the thread name. By default, a unique name is constructed of the form "Thread-N" where N is a small decimal number.
  args is the argument tuple for the target invocation. Defaults to ();
  kwargs is a dictionary of keyword arguments for the target invocation. Defaults to {}
  If the subclass overrides the constructor, it must make sure to invoke the base class constructor (Thread.__init__()) before doing anything else to the thread.

start()
  Start the thread's activity
  It must be called at most once per thread object. It arranges for the object's run() method to be invoked in a seperate thread of control.
  This method will raise a RuntimeError is called more thatn once on the same thread object.

run()
  Method representing the thread's activity
  You may overrides this method in a subclass. The standard run() method invokes the callable object passed to the object's constructor as the target argument, if any, with sequential and keyword arguments taken from the args and kwargs arguments, respectively.

join([timeout])
  Wait until the thread terminates. This blocks the calling thread until the thread whose join() method is called terminates - either normally or through an unhandled exception - or until the optional timeout occurs.
  When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). As join() always returns None, you must call isAlive() after join() to decide whether a timeout happened - if the thread is still alive, the join() call timed out.
  When the timeout argument is not present or None, the operation will block until the thread terminates.
  A thread can be join()ed many times.
  join() raises a RuntimeError if an attempt is made to join the current thread as that would cause a deadlock, It is also an error to join() a thread before it has been started and attempts to do so raises the same exception.

